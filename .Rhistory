round((popsize*p*p)
)
#estimate allele freqs for "pool seq" data
t = pop[,2:ncol(pop)]
t[t==2] = NA
t[t==0] = 2
x=apply(t, 2, sum, na.rm=T)
plot(pfreq,x)
x
3689/2000
3689/4000
#function to create pools of genotypes in HWE
geno.pool = function(popsize){
p = sample(seq(from = 0, to = 0.5, by = 0.01), 1)
genos = c(rep(0, round((popsize*p*p), 0)),                                                #homozygous p*p
rep(1, round((popsize*(1-p)*(1-p)), 0)),                                        #homozygous 1-p^2
rep(2, popsize-(round((popsize*p*p), 0)+round((popsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#genos = sample(pool, popsize, replace=F)
return(list(genos, p))
}
#get genotypes; since above won't work I'll loop it but I'm not happy about it
pfreq = NULL
for(c in 2:(nSNPs+1)){
all.output = unlist(geno.pool(popsize))
pop[,c] = all.output[1:nrow(pop)]
pfreq = c(pfreq, all.output[length(all.output)])
}
#estimate allele freqs for "pool seq" data
t = pop[,2:ncol(pop)]
t[t==2] = NA
t[t==0] = 2
x=apply(t, 2, sum, na.rm=T)
plot(pfreq,x)
x=apply(t, 2, sum, na.rm=T)/(popsize*2)
plot(pfreq,x)
abline(0,1)
abline(0,-1)
abline(1,-1)
t = pop[,2:ncol(pop)]
head(t)
?apply
x=apply(t, 2, sum, na.rm=T)/(popsize*2)
plot(pfreq,x)
x = 1-x
plot(pfreq,x)
plot((1-pfreq),x)
hist(pfreq)
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
genos = c(rep(2, round((popsize*p*p), 0)),                                                #homozygous p*p
rep(1, round((popsize*(1-p)*(1-p)), 0)),                                        #homozygous 1-p^2
rep(0, popsize-(round((popsize*p*p), 0)+round((popsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#function to create pools of genotypes in HWE
geno.pool = function(popsize){
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
genos = c(rep(2, round((popsize*p*p), 0)),                                                #homozygous p*p
rep(1, round((popsize*(1-p)*(1-p)), 0)),                                        #homozygous 1-p^2
rep(0, popsize-(round((popsize*p*p), 0)+round((popsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#genos = sample(pool, popsize, replace=F)
return(list(genos, p))
}
#get genotypes; since above won't work I'll loop it but I'm not happy about it
pfreq = NULL
for(c in 2:(nSNPs+1)){
all.output = unlist(geno.pool(popsize))
pop[,c] = all.output[1:nrow(pop)]
pfreq = c(pfreq, all.output[length(all.output)])
}
#estimate allele freqs for "pool seq" data
t = pop[,2:ncol(pop)]
x=apply(t, 2, sum, na.rm=T)/(popsize*2)
plot((pfreq),x)
popsize = 2000
nSNPs   = 100
#initiate population
pop = matrix(data=NA, nrow=popsize, ncol=(nSNPs+1))
pop[ ,1] = seq(1, popsize, 1) #individual ids
#function to create pools of genotypes in HWE
geno.pool = function(popsize){
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
genos = c(rep(2, round((popsize*p*p), 0)),                                                #homozygous p*p
rep(1, round((popsize*(p)*(1-p)), 0)),                                          #homozygous 1-p^2
rep(0, popsize-(round((popsize*p*p), 0)+round((popsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#genos = sample(pool, popsize, replace=F)
return(list(genos, p))
}
#get genotypes; since above won't work I'll loop it but I'm not happy about it
pfreq = NULL
for(c in 2:(nSNPs+1)){
all.output = unlist(geno.pool(popsize))
pop[,c] = all.output[1:nrow(pop)]
pfreq = c(pfreq, all.output[length(all.output)])
}
#estimate allele freqs for "pool seq" data
t = pop[,2:ncol(pop)]
x=apply(t, 2, sum, na.rm=T)/(popsize*2)
plot((pfreq),x)
plot(pfreq, estimateAF, xlim=c(0,1), ylim=c(0,1))
#estimate allele freqs for "pool seq" data
estimateAF = apply(pop[,2:ncol(pop)], 2, sum, na.rm=T)/(popsize*2)
plot(pfreq, estimateAF, xlim=c(0,1), ylim=c(0,1))
?segments
segments(0,0,1,1)
nSNPs   = 500
#initiate population
pop = matrix(data=NA, nrow=popsize, ncol=(nSNPs+1))
pop[ ,1] = seq(1, popsize, 1) #individual ids
#function to create pools of genotypes in HWE
geno.pool = function(popsize){
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
genos = c(rep(2, round((popsize*p*p), 0)),                                                #homozygous p*p
rep(1, round((popsize*(p)*(1-p)), 0)),                                          #homozygous 1-p^2
rep(0, popsize-(round((popsize*p*p), 0)+round((popsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#genos = sample(pool, popsize, replace=F)
return(list(genos, p))
}
#get genotypes; since above won't work I'll loop it but I'm not happy about it
pfreq = NULL
for(c in 2:(nSNPs+1)){
all.output = unlist(geno.pool(popsize))
pop[,c] = all.output[1:nrow(pop)]
pfreq = c(pfreq, all.output[length(all.output)])
}
#estimate allele freqs for "pool seq" data
estimateAF = apply(pop[,2:ncol(pop)], 2, sum, na.rm=T)/(popsize*2)
plot(pfreq, estimateAF, xlim=c(0,1), ylim=c(0,1))
segments(0,0,1,1)
nSNPs   = 100
#initiate population
pop = matrix(data=NA, nrow=popsize, ncol=(nSNPs+1))
pop[ ,1] = seq(1, popsize, 1) #individual ids
#function to create pools of genotypes in HWE
geno.pool = function(popsize){
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
genos = c(rep(2, round((popsize*p*p), 0)),                                                #homozygous p*p
rep(1, round((popsize*(p)*(1-p)), 0)),                                          #homozygous 1-p^2
rep(0, popsize-(round((popsize*p*p), 0)+round((popsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#genos = sample(pool, popsize, replace=F)
return(list(genos, p))
}
#get genotypes; since above won't work I'll loop it but I'm not happy about it
pfreq = NULL
for(c in 2:(nSNPs+1)){
all.output = unlist(geno.pool(popsize))
pop[,c] = all.output[1:nrow(pop)]
pfreq = c(pfreq, all.output[length(all.output)])
}
#estimate allele freqs for "pool seq" data
estimateAF = apply(pop[,2:ncol(pop)], 2, sum, na.rm=T)/(popsize*2)
plot(pfreq, estimateAF, xlim=c(0,1), ylim=c(0,1))
segments(0,0,1,1)
seqsize = 50   #total number of seqs with individual genotype data
nSNPs   = 100  #number of SNPs
#initiate population
pop = matrix(data=NA, nrow=popsize, ncol=(nSNPs+1))
pop[ ,1] = seq(1, popsize, 1) #individual ids
totpopsize = popsize + seqsize
#function to create pools of genotypes in HWE
geno.pool = function(popsize, seqsize){
totpopsize = popsize + seqsize
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
genos = c(rep(2, round((totpopsize*p*p), 0)),                                                #homozygous p*p
rep(1, round((totpopsize*(p)*(1-p)), 0)),                                          #homozygous 1-p^2
rep(0, totpopsize-(round((totpopsize*p*p), 0)+round((totpopsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#genos = sample(pool, popsize, replace=F)
return(list(genos, p))
}
#initiate indv seq matrix
ind = matrix(data=NA, nrow=seqsize, ncol=(nSNPs+1))
ind[ ,1] = seq(1, seqsize, 1) #individual ids
popsize
seqsize
ind[,c] = all.output[(1+popsize):(1+popsize+seqsize)]
ind[,c] = all.output[(1+popsize):(2+popsize+seqsize)]
dim(ind)
1+popsize
2+popsize+seqsize
ind[,c] = all.output[(1+popsize):(1+popsize+seqsize)]
all.output[(1+popsize):(1+popsize+seqsize)]
x=all.output[(1+popsize):(1+popsize+seqsize)]
length(x)
y=all.output[1:popsize]
length(y)
dim(all.output)
all.output = unlist(geno.pool(popsize))
all.output = unlist(geno.pool(popsize, seqsize))
pop[,c] = all.output[1:popsize]
ind[,c] = all.output[(1+popsize):(1+popsize+seqsize)]
length(all.output[(1+popsize):(1+popsize+seqsize)])
ind[,c] = all.output[(1+popsize):(popsize+seqsize)]
pfreq = c(pfreq, all.output[length(all.output)])
tail(ind)
c
all.output[(1+popsize):(popsize+seqsize)]
all.output[1:popsize]
all.output = unlist(geno.pool(popsize, seqsize))
all.output
length(all.output)
popsize
seqsize
popsize = 2000 #total number of seqs in pool seq
seqsize = 50   #total number of seqs with individual genotype data
nSNPs   = 100  #number of SNPs
#initiate pop seq matrix
pop = matrix(data=NA, nrow=popsize, ncol=(nSNPs+1))
pop[ ,1] = seq(1, popsize, 1) #individual ids
#initiate indv seq matrix
ind = matrix(data=NA, nrow=seqsize, ncol=(nSNPs+1))
ind[ ,1] = seq(1, seqsize, 1) #individual ids
#function to create pools of genotypes in HWE
geno.pool = function(popsize, seqsize){
totpopsize = popsize + seqsize
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
genos = c(rep(2, round((totpopsize*p*p), 0)),                                                      #homozygous p*p
rep(1, round((totpopsize*(p)*(1-p)*2), 0)),                                                #homozygous 1-p^2
rep(0, totpopsize-(round((totpopsize*p*p), 0)+round((totpopsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#genos = sample(pool, popsize, replace=F)
return(list(genos, p))
}
#get genotypes; since above won't work I'll loop it but I'm not happy about it
pfreq = NULL
for(c in 2:(nSNPs+1)){
all.output = unlist(geno.pool(popsize, seqsize))
pop[,c] = all.output[1:popsize]
ind[,c] = all.output[(1+popsize):(popsize+seqsize)]
pfreq = c(pfreq, all.output[length(all.output)])
}
pop
ind
all.output
#function to create pools of genotypes in HWE
geno.pool = function(popsize, seqsize){
totpopsize = popsize + seqsize
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
genos = c(rep(2, round((totpopsize*p*p), 0)),                                                      #homozygous p*p
rep(1, round((totpopsize*(p)*(1-p)*2), 0)),                                                #homozygous 1-p^2
rep(0, totpopsize-(round((totpopsize*p*p), 0)+round((totpopsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#genos = sample(pool, popsize, replace=F)
return(list(genos, p))
}
x=geno.pool(popsize, seqsize)
length(x)
x
unlist(x)
length(unlist(x))
#function to create pools of genotypes in HWE
geno.pool = function(popsize, seqsize){
totpopsize = popsize + seqsize
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
genos = c(rep(2, round((totpopsize*p*p), 0)),                                                      #homozygous p*p
rep(1, round((totpopsize*((p)*(1-p)*2)), 0)),                                              #homozygous 1-p^2
rep(0, totpopsize-(round((totpopsize*p*p), 0)+round((totpopsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#genos = sample(pool, popsize, replace=F)
return(list(genos, p))
}
x=geno.pool(popsize, seqsize)
x
length(unlist(x))
#function to create pools of genotypes in HWE
geno.pool = function(popsize, seqsize){
totpopsize = popsize + seqsize
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
genos = c(rep(2, round((totpopsize*p*p), 0)),                                                      #homozygous p*p
rep(1, round((totpopsize*((p)*(1-p))), 0)),                                              #homozygous 1-p^2
rep(0, totpopsize-(round((totpopsize*p*p), 0)+round((totpopsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#genos = sample(pool, popsize, replace=F)
return(list(genos, p))
}
x=geno.pool(popsize, seqsize)
length9x
length(x)
length(unlist(x))
x
setwd("/Users/jannawilloughby/GDrive/gray bats - alabama/poolseq_quant//")
library(scales)
popsize = 2000 #total number of seqs in pool seq
seqsize = 50   #total number of seqs with individual genotype data
nSNPs   = 100  #number of SNPs
#initiate pop seq matrix
pop = matrix(data=NA, nrow=popsize, ncol=(nSNPs+1))
pop[ ,1] = seq(1, popsize, 1) #individual ids
#initiate indv seq matrix
ind = matrix(data=NA, nrow=seqsize, ncol=(nSNPs+1))
ind[ ,1] = seq(1, seqsize, 1) #individual ids
#function to create pools of genotypes in HWE
geno.pool = function(popsize, seqsize){
totpopsize = popsize + seqsize
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
genos = c(rep(2, round((totpopsize*p*p), 0)),                                                #homozygous p*p
rep(1, round((totpopsize*(p)*(1-p)), 0)),                                          #homozygous 1-p^2
rep(0, totpopsize-(round((totpopsize*p*p), 0)+round((totpopsize*(1-p)*(1-p)), 0)))       #heterozygotes 2pq
)
#genos = sample(pool, popsize, replace=F)
return(list(genos, p))
}
pop[,2:(nSNPs+1)] = apply(pop[,2:(nSNPs+1)], 2, geno.pool, popsize=popsize)
?sample
q = 1 - p
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
q = 1 - p
sample(c(2,1,0), popsize, prob=c((p*p), (2*p*q), (q*q)))
sample(c(2,1,0), popsize, replace=T, prob=c((p*p), (2*p*q), (q*q)))
popsize
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
q = 1 - p
pop.genos = sample(c(2,1,0), popsize, replace=T, prob=c((p*p), (2*p*q), (q*q)))
ind.genos = sample(c(2,1,0), seqsize, replace=T, prob=c((p*p), (2*p*q), (q*q)))
#function to create pools of genotypes in HWE
geno.pool = function(popsize, seqsize){
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
q = 1 - p
pop.genos = sample(c(2,1,0), popsize, replace=T, prob=c((p*p), (2*p*q), (q*q)))
ind.genos = sample(c(2,1,0), seqsize, replace=T, prob=c((p*p), (2*p*q), (q*q)))
#genos = sample(pool, popsize, replace=F)
return(list(pop.genos, ind.genos, p, q))
}
#get genotypes; since above won't work I'll loop it but I'm not happy about it
pfreq = qfreq = NULL
for(c in 2:(nSNPs+1)){
all.output = geno.pool(popsize, seqsize)
pop[,c] = all.output[1]
ind[,c] = all.output[2]
pfreq = c(pfreq, all.output[3])
qfreq = c(qfreq, all.output[4])
}
#function to create pools of genotypes in HWE
geno.pool = function(popsize, seqsize){
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
q = 1 - p
pop.genos = sample(c(2,1,0), popsize, replace=T, prob=c((p*p), (2*p*q), (q*q)))
ind.genos = sample(c(2,1,0), seqsize, replace=T, prob=c((p*p), (2*p*q), (q*q)))
#genos = sample(pool, popsize, replace=F)
return(list(pop.genos, ind.genos, p, q))
}
all.output = geno.pool(popsize, seqsize)
all.output
#get genotypes; since above won't work I'll loop it but I'm not happy about it
pfreq = qfreq = NULL
for(c in 2:(nSNPs+1)){
all.output = geno.pool(popsize, seqsize)
pop[,c] = all.output[[1]]
ind[,c] = all.output[[2]]
pfreq = c(pfreq, all.output[[3]])
qfreq = c(qfreq, all.output[[4]])
}
all.output[[1]]
unlist(all.output[[1]])
pop[,c] = unlist(all.output[[1]])
all.output[[1]]
all.output[[1]]
as.list(all.output[[1]])
as.vector(all.output[[1]])
pop[,c] = as.vector(all.output[[1]])
c
#function to create pools of genotypes in HWE
geno.pool = function(popsize, seqsize){
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
q = 1 - p
pop.genos = sample(c(2,1,0), popsize, replace=T, prob=c((p*p), (2*p*q), (q*q)))
ind.genos = sample(c(2,1,0), seqsize, replace=T, prob=c((p*p), (2*p*q), (q*q)))
#genos = sample(pool, popsize, replace=F)
return(list(pop.genos, ind.genos, p, q))
}
geno.pool(popsize, seqsize)
all.output = geno.pool(popsize, seqsize)
all.output[[1]]
unlist(all.output[[1]])
c
dim(pop)
#initiate pop seq matrix
pop = matrix(data=NA, nrow=popsize, ncol=(nSNPs+1))
pop[ ,1] = seq(1, popsize, 1) #individual ids
#initiate pop seq matrix
pop = matrix(data=NA, nrow=popsize, ncol=(nSNPs+1))
dim(pop)
pop[ ,1] = seq(1, popsize, 1) #individual ids
#initiate indv seq matrix
ind = matrix(data=NA, nrow=seqsize, ncol=(nSNPs+1))
ind[ ,1] = seq(1, seqsize, 1) #individual ids
all.output = geno.pool(popsize, seqsize)
pop[,c] = unlist(all.output[[1]])
#get genotypes; since above won't work I'll loop it but I'm not happy about it
pfreq = qfreq = NULL
for(c in 2:(nSNPs+1)){
all.output = geno.pool(popsize, seqsize)
pop[,c] = unlist(all.output[[1]])
ind[,c] = unlist(all.output[[2]])
pfreq = c(pfreq, unlist(all.output[[3]]))
qfreq = c(qfreq, unlist(all.output[[4]]))
}
#estimate allele freqs for "pool seq" data
estimateAF = apply(pop[,2:ncol(pop)], 2, sum, na.rm=T)/(popsize*2)
plot(pfreq, estimateAF, xlim=c(0,1), ylim=c(0,1))
segments(0,0,1,1)
lgpop = sample(c(2,1,0), pop.T, replace=T, prob=c((p*p), (2*p*q), (q*q)))
pop.T   = 10000  #true population size
lgpop = sample(c(2,1,0), pop.T, replace=T, prob=c((p*p), (2*p*q), (q*q)))
head(lgpop)
pop.genos = sample(lgpop, popsize, replace=F)
ind.genos = sample(lgpop, seqsize, replace=F)
#function to create pools of genotypes in HWE
geno.pool = function(popsize, seqsize){
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
q = 1 - p
lgpop = sample(c(2,1,0), pop.T, replace=T, prob=c((p*p), (2*p*q), (q*q)))
pop.genos = sample(lgpop, popsize, replace=F)
ind.genos = sample(lgpop, seqsize, replace=F)
#genos = sample(pool, popsize, replace=F)
return(list(pop.genos, ind.genos, p, q))
}
#get genotypes; since apply won't work I'll loop it but I'm not happy about it
pfreq = qfreq = NULL
for(c in 2:(nSNPs+1)){
all.output = geno.pool(popsize, seqsize)
pop[,c] = unlist(all.output[[1]])
ind[,c] = unlist(all.output[[2]])
pfreq = c(pfreq, unlist(all.output[[3]]))
qfreq = c(qfreq, unlist(all.output[[4]]))
}
#estimate allele freqs for "pool seq" data
estimateAF = apply(pop[,2:ncol(pop)], 2, sum, na.rm=T)/(popsize*2)
plot(pfreq, estimateAF, xlim=c(0,1), ylim=c(0,1))
segments(0,0,1,1)
hist(estimateAF)
hist(pfreq)
i=1
ii = ind[i,,drop=F]
ii
ii = ind[i,2:ncols(ind),drop=F]
ii = ind[i,2:ncol(ind),drop=F]
pfreq
sum(pfreq*ii)
hist(pfreq*ii)
.9*.9
.999*.999
ii = data.frame(geno = ind[i,2:ncol(ind),drop=F], prob = rep(NA, ncol(ind))
}
#plot data nicely
off = 100
plot(-10000, -10000, xlim=c(0, 100000), ylim=c(0,3000000), xlab="total number of samples genotyped per year", ylab="estimated population size")
segments(x0=0, x1=100000, y0=popsize, y1=popsize, lty=2, col="grey50")
lines(x=o$totalgenos, y=o$NstM, lty=1, col=alpha("firebrick3", 0.5), lwd=2)
points(x=o$totalgenos, y=o$NstM, pch=19, col=alpha("firebrick3", 0.5), cex=1.5)
segments(x0=c(o$totalgenos - off), x1=c(o$totalgenos + off), y0=o$NstLL, y1=o$NstLL, col=alpha("firebrick3", 0.8))
segments(x0=c(o$totalgenos - off), x1=c(o$totalgenos + off), y0=o$NstUL, y1=o$NstUL, col=alpha("firebrick3", 0.8))
segments(x0=o$totalgenos, x1=o$totalgenos, y0=o$NstLL, y1=o$NstUL, col=alpha("firebrick3", 0.8))
write.table(o, "markrecapture_samp/simulationoutput.csv", row.names=F, col.names=T, sep=",")
ii = data.frame(geno = ind[i,2:ncol(ind),drop=F], prob = rep(NA, ncol(ind)))
ii
ii = rbind(ind[i,2:ncol(ind),drop=F], rep(NA, ncol(ind)))
ii = rbind(ind[i,2:ncol(ind),drop=F], rep(NA, ncol(ind-1)))
ii = rbind(ind[i,,drop=F], rep(NA, ncol(ind)))
ii
ii = cbind(ind[i,,drop=F], rep(NA, ncol(ind)))
ii = cbind(ind[i,], rep(NA, ncol(ind)))
ii
ii = cbind(ind[i,], estimateAF, rep(NA, ncol(ind)))
ii = cbind(ind[i,2:ncol(ind)], estimateAF, rep(NA, ncol(ind-1)))
ncol(ind)
ind-1
length(estimateAF)
ii = cbind(ind[i,2:ncol(ind)], estimateAF, rep(NA, ncol((ind-1))))
ncol((ind-1))
ii = cbind(ind[i,2:ncol(ind)], estimateAF, rep(NA, ncol(ind)-1))
setwd("/Users/jannawilloughby/GDrive/gray bats - alabama/poolseq_quant/")
library(scales)
popsize = 2000   #total number of seqs in pool seq
seqsize = 50     #total number of seqs with individual genotype data
pop.T   = 10000  #true population size
nSNPs   = 100    #number of SNPs
#initiate pop seq matrix
pop = matrix(data=NA, nrow=popsize, ncol=(nSNPs+1))
pop[ ,1] = seq(1, popsize, 1) #individual ids
#initiate indv seq matrix
ind = matrix(data=NA, nrow=seqsize, ncol=(nSNPs+1))
ind[ ,1] = seq(1, seqsize, 1) #individual ids
#function to create pools of genotypes in HWE
geno.pool = function(popsize, seqsize){
p = sample(seq(from = 0, to = 1, by = 0.001), 1)
q = 1 - p
lgpop = sample(c(2,1,0), pop.T, replace=T, prob=c((p*p), (2*p*q), (q*q)))
pop.genos = sample(lgpop, popsize, replace=F)
ind.genos = sample(lgpop, seqsize, replace=F)
#genos = sample(pool, popsize, replace=F)
return(list(pop.genos, ind.genos, p, q))
}
#get genotypes; since apply won't work I'll loop it but I'm not happy about it
pfreq = qfreq = NULL
for(c in 2:(nSNPs+1)){
all.output = geno.pool(popsize, seqsize)
pop[,c] = unlist(all.output[[1]])
ind[,c] = unlist(all.output[[2]])
pfreq = c(pfreq, unlist(all.output[[3]]))
qfreq = c(qfreq, unlist(all.output[[4]]))
}
#estimate allele freqs for "pool seq" data
estimateAF = apply(pop[,2:ncol(pop)], 2, sum, na.rm=T)/(popsize*2)
plot(pfreq, estimateAF, xlim=c(0,1), ylim=c(0,1))
segments(0,0,1,1)
i=1
ii = cbind(ind[i,2:ncol(ind)], estimateAF, rep(NA, ncol(ind)-1))
head(ii)
